(()=>{"use strict";var t={311:t=>{t.exports=jQuery}},e={};function o(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,o),r.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{const t=(()=>{class t{constructor(t,e,o,n,s){this.name=t,this.id=e,this.theme=o,this.icon=n,this.todos=s||[]}}let e=[],o="";return{projects:e,activeProject:o,addProject:function(n,s,r,a,l){const d=new t(n,s,r,a,l);o=d.name,e.push(d),localStorage.setItem("projects",JSON.stringify(e))},addTodoToProject:function(t){const n=document.getElementById("project-title");o="All"===n.textContent||"Completed"===n.textContent?"Tasks":n.textContent;for(let n of e)n.name===o&&(n.todos.push(t),console.log(n.name),console.log("Check em yo"));localStorage.setItem("projects",JSON.stringify(e))}}})();var e=o(311);const n=(()=>{function o(e){const o=document.querySelector(`[data-key='${e.id}']`);if(e.deleted)return void o.remove();const n=document.querySelector(".todo-list"),s=document.createElement("li"),a=e.checked?"done":"";s.setAttribute("class",`total-todo ${a}`),s.setAttribute("data-key",e.id),s.innerHTML=`\n        <div class="todo-item">\n                <div class="checkbox">\n                    <input type="checkbox" name="checkbox" id="${e.id}">\n                    <label for="${e.id}" class="js-tick tick">\n                </div>\n                <div class="todo-main">\n                    <span class="js-todo">${e.name}</span>\n                </div>\n        </div>\n        `;const l=document.createElement("div");l.classList.add("right-side"),s.appendChild(l),!1===e.important||void 0===e.important?l.innerHTML='\n            <button class="bi bi-star star"></button>\n            <button class="bi bi-trash js-delete"></button>\n            <button class="bi bi-pencil-square js-edit"></button>\n            ':l.innerHTML='\n            <button class="bi bi-star-fill star"></button>\n            <button class="bi bi-trash js-delete"></button>\n            <button class="bi bi-pencil-square js-edit"></button>\n            ',o?n.replaceChild(s,o):n.append(s),localStorage.setItem("todos",JSON.stringify(r.tasks)),localStorage.setItem("projects",JSON.stringify(t.projects))}return document.addEventListener("DOMContentLoaded",(function(){const e=document.querySelector(".todo-list");document.querySelector(".todo-input").disabled=!0,e.textContent="Welcome! Create a new project or click 'All' to get started.";let o=JSON.parse(localStorage.getItem("projects"));const n=document.getElementById("projects-nav");for(let e of o){const o=n.getElementsByTagName("li").length+1;e.id="project-"+o,t.addProject(e.name,e.id,e.theme,e.icon,e.todos);const r=document.createElement("li");r.setAttribute("id",`project-${o}`),r.classList.add("project-nav-item"),r.innerHTML=`\n                <div class="new-project" data-key="project-${o}">\n                    <span id="project-title-${o}" data-key="project-${o}">${e.name}</span>\n                </div>\n            `,n.appendChild(r),s.clickNav(r)}})),{renderTodo:o,editTodo:function(o,n){const s=document.getElementById("todo-notes"),a=document.getElementById("datepicker"),l=document.getElementById("todo-text");l.value=r.tasks[n].name,a.value=r.tasks[n].date,s.value=r.tasks[n].notes,e("#edit-todo-window").dialog({modal:!0,buttons:[{text:"Save",click:function(){r.tasks[n].name=l.value,o.parentElement.parentElement.parentElement.children[0].children[0].children[1].textContent=l.value,e(this).dialog("close"),r.tasks[n].date=a.value,r.tasks[n].notes=s.value,localStorage.setItem("todos",JSON.stringify(r.tasks)),localStorage.setItem("projects",JSON.stringify(t.projects))}}]})},loadDefault:function(){const e=document.getElementById("project-title");document.querySelector(".todo-list").innerHTML="",e.textContent="Tasks",t.activeProject="Tasks",console.log("Active project: "+t.activeProject);for(let e of t.projects)if("project-0"===e.id)for(let t of e.todos)o(t)},createProjectNav:function(t){const e=document.getElementById("projects-nav"),o=document.createElement("li"),n=e.getElementsByTagName("li").length+1;o.setAttribute("id",`project-${n}`),o.classList.add("project-nav-item"),o.innerHTML=`\n        <div class="new-project" data-key="project-${n}">\n            <span id="project-title-${n}" data-key="project-${n}"></span>\n            <input type="text" id="project-input-${n}" data-key="project-${n}">\n        </div>\n        `,e.appendChild(o),s.projectInput(n),s.clickNav(o)},setProject:function(e,o){const n=document.getElementById(`project-input-${e}`),s=document.getElementById(`project-title-${e}`),r=document.getElementById("project-title");document.querySelector(".todo-list").innerHTML="",s.textContent=o,n.style.display="none",t.activeProject=o,r.textContent=o,t.addProject(r.textContent,`project-${e}`),console.log("Active project: "+t.activeProject)},loadProject:function(e){const n=document.getElementById("project-title");document.querySelector(".todo-list").innerHTML="",n.textContent=t.activeProject;for(let n of t.projects)if(e.id===n.id)for(let t of n.todos)o(t)},loadAllTasks:function(){const e=document.querySelector(".todo-list"),n=document.querySelector("#project-title");t.activeProject="Tasks",n.innerHTML="All",e.innerHTML="";for(let t of r.tasks)!1!==t.checked&&void 0!==t.checked||o(t)},loadImportant:function(){const t=document.querySelector(".todo-list");document.querySelector("#project-title").innerHTML="Important",t.innerHTML="";for(let t of r.tasks)!0!==t.important||!1!==t.checked&&void 0!==t.checked||o(t)},loadCompleted:function(){const t=document.querySelector(".todo-list");document.querySelector("#project-title").innerHTML="Completed",t.innerHTML="";for(let t of r.tasks)!0===t.checked&&o(t)}}})(),s=(()=>{const e=document.querySelector(".todo-input"),o=document.getElementById("submit"),s=document.querySelector(".todo-list"),a=document.querySelector(".new-project"),l=document.getElementById("all-todos"),d=document.getElementById("important-todos"),i=document.getElementById("completed-todos"),c=document.querySelector("#project-title");return c.addEventListener("click",(function(){let e=c.textContent;const o=document.createElement("input"),n=document.querySelectorAll(".project-nav-item"),s=document.querySelector(".header-title");if("Todo List"===c.textContent||"All"===c.textContent||"Completed"===c.textContent||"Important"===c.textContent)return!1;o.setAttribute("type","text"),o.value=c.textContent,c.style.display="none",s.appendChild(o),o.focus(),o.addEventListener("keydown",(function(s){if("Enter"===s.key)if(""!==o.value){o.style.display="none",c.textContent=o.value;for(let e of t.projects)e.name===t.activeProject&&(e.name=o.value),n.forEach((t=>{t.id===e.id&&(t.children[0].children[0].textContent=e.name)}));c.style.display="block",t.activeProject=c.textContent,localStorage.setItem("projects",JSON.stringify(t.projects))}else o.style.display="none",c.textContent=e,c.style.display="block"})),o.addEventListener("blur",(function(){if(""!==o.value){o.style.display="none",c.textContent=o.value;for(let e of t.projects)e.name===t.activeProject&&(e.name=o.value),n.forEach((t=>{t.id===e.id&&(t.children[0].children[0].textContent=e.name)}));t.activeProject=c.textContent,localStorage.setItem("projects",JSON.stringify(t.projects))}else o.style.display="none",c.textContent=e;c.style.display="block"}))})),document.addEventListener("click",(function(){const t=document.querySelector(".todo-input"),e=document.querySelector("#project-title");"Completed"===e.textContent||"Important"===e.textContent?t.disabled=!0:t.disabled=!1})),l.addEventListener("click",n.loadAllTasks),d.addEventListener("click",n.loadImportant),i.addEventListener("click",n.loadCompleted),a.addEventListener("click",n.createProjectNav),o.addEventListener("click",(function(){""!==e.value?(r.addTodo(e.value),e.value="",e.focus()):alert("ERROR: Can't be blank.")})),e.addEventListener("keydown",(function(t){"Enter"===t.key&&(""!==e.value?(r.addTodo(e.value),e.value="",e.focus()):alert("ERROR: Can't be blank"))})),s.addEventListener("click",(e=>{if(e.target.classList.contains("js-tick")){const t=e.target.parentElement.parentElement.parentElement.dataset.key;r.toggleDone(t)}if(e.target.classList.contains("star")){const o=e.target.parentElement.parentElement.dataset.key,s=r.tasks.findIndex((t=>t.id===Number(o)));if(!1===r.tasks[s].important||void 0===r.tasks[s].important){r.tasks[s].important=!0;for(let e of t.projects)for(let t of e.todos)t.id===r.tasks[s].id&&(t.important=!0);e.target.classList.add("bi-star-fill"),e.target.classList.remove("bi-star")}else{r.tasks[s].important=!1;for(let e of t.projects)for(let t of e.todos)t.id===r.tasks[s].id&&(t.important=!1);e.target.classList.remove("bi-star-fill"),e.target.classList.add("bi-star")}localStorage.setItem("todos",JSON.stringify(r.tasks)),localStorage.setItem("projects",JSON.stringify(t.projects)),n.renderTodo(r.tasks[s])}if(e.target.classList.contains("js-edit")){const t=e.target.parentElement.parentElement.dataset.key,o=r.tasks.findIndex((e=>e.id===Number(t)));console.log("Hi!"),n.editTodo(e.target,o)}if(e.target.classList.contains("js-delete")){const o=e.target.parentElement.parentElement.dataset.key,s=r.tasks.findIndex((t=>t.id===Number(o))),a={deleted:!0,...r.tasks[s]};if(!0===r.tasks[s].deleted||void 0===r.tasks[s].deleted)for(let e of t.projects)for(let a of e.todos)if(a.id===r.tasks[s].id){a.deleted=!0,e.todos=e.todos.filter((t=>t.id!==Number(o)));const s={deleted:!0,...e.todos};localStorage.setItem("projects",JSON.stringify(t.projects)),n.renderTodo(s)}r.tasks=r.tasks.filter((t=>t.id!==Number(o))),n.renderTodo(a)}if(e.target.classList.contains("js-todo")){const o=e.target.parentElement.parentElement.parentElement.dataset.key,n=r.tasks.findIndex((t=>t.id===Number(o))),s=document.createElement("input");s.setAttribute("type","text"),s.classList.add("todo-new"),e.target.parentElement.appendChild(s),s.focus(),s.value=e.target.textContent,e.target.style.display="none",s.addEventListener("keydown",(function(o){if("Enter"===o.key)if(""===s.value)alert("ERROR: Can't submit a blank task.");else{s.style.display="none",e.target.style.display="inline-block",e.target.textContent=s.value,r.tasks[n].name=s.value;for(let e of t.projects)for(let o of e.todos)o.id===r.tasks[n].id&&(o.name=s.value,localStorage.setItem("projects",JSON.stringify(t.projects)));localStorage.setItem("todos",JSON.stringify(r.tasks))}})),s.addEventListener("blur",(function(){s.style.display="none",e.target.style.display="inline-block",""!==s.value&&(e.target.textContent=s.value)}))}if(e.target.classList.contains("total-todo")){console.log("Totally");const o=e.target.dataset.key,n=r.tasks.findIndex((t=>t.id===Number(o))),s=document.createElement("input");s.setAttribute("type","text"),s.classList.add("todo-new"),e.target.children[0].children[1].appendChild(s),s.focus(),s.value=e.target.children[0].children[1].children[0].textContent,e.target.children[0].children[1].children[0].style.display="none",s.addEventListener("keydown",(function(o){if("Enter"===o.key)if(""===s.value)alert("ERROR: Can't submit a blank task.");else{s.style.display="none",e.target.children[0].children[1].children[0].style.display="inline-block",e.target.children[0].children[1].children[0].textContent=s.value,r.tasks[n].name=s.value;for(let e of t.projects)for(let o of e.todos)o.id===r.tasks[n].id&&(o.name=s.value,localStorage.setItem("projects",JSON.stringify(t.projects)));localStorage.setItem("todos",JSON.stringify(r.tasks))}})),s.addEventListener("blur",(function(){s.style.display="none",e.target.children[0].children[1].children[0].style.display="inline-block",""!==s.value&&(e.target.children[0].children[1].children[0].textContent=s.value)}))}})),{projectInput:function(t){const e=document.querySelector(".todo-input"),o=document.getElementById(`project-input-${t}`);o.focus(),o.addEventListener("keydown",(function(s){"Enter"===s.key&&(e.disabled=!1,""===o.value?alert("ERROR: Blank titles not allowed."):n.setProject(t,o.value))}))},clickNav:function(e){e.addEventListener("click",(function(){t.activeProject=e.children[0].children[0].textContent,n.loadProject(e)}))}}})(),r=(()=>{class e{constructor(t){this.name=t,this.id=Date.now(),this.notes="",this.date=""}}let o=JSON.parse(localStorage.getItem("todos"))||[];return{tasks:o,addTodo:function(s,r,a,l,d){const i=new e(s,r,a,l,d);o.push(i),n.renderTodo(i),t.addTodoToProject(i),localStorage.setItem("todos",JSON.stringify(o))},toggleDone:function(t){const e=o.findIndex((e=>e.id===Number(t)));o[e].checked=!o[e].checked,n.renderTodo(o[e])},deleteTodo:function(e){console.log(e);const s=o.findIndex((t=>t.id===Number(e))),r={deleted:!0,...o[s]};if(console.log(t.activeProject),confirm("Are you sure you want to delete this todo item?")){for(let n of t.projects)n.name===t.activeProject&&(n.todos=n.todos.filter((t=>t.id!==Number(e))),o=o.filter((t=>t.id!==Number(e))),localStorage.setItem("projects",JSON.stringify(t.projects)));o=o.filter((t=>t.id!==Number(e))),localStorage.setItem("todos",JSON.stringify(o)),n.renderTodo(r)}}}})();var a=o(311),l=o.n(a);l()("#datepicker").datepicker(),window.jQuery=l(),window.$=l()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,